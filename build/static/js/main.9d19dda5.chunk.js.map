{"version":3,"sources":["components/Header/Header.js","components/TableResult/TableResult.js","components/EmployeeTable/EmployeeTable.js","App.js","serviceWorker.js","index.js"],"names":["Header","TableResult","props","console","log","listEmployees","employees","map","employee","key","id","first_name","last_name","title","Table","striped","border","hover","Button","variant","size","onClick","sortById","sortByFirst","sortByLast","sortByTitle","sortedEmployees","EmployeeTable","state","sort","a","b","parseInt","setState","localeCompare","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9d19dda5.chunk.js","sourcesContent":["import React from 'react'\n\n\nfunction Header() {\n    return(\n        <header>\n            <h1>Welcome</h1>\n        </header>\n    )\n}\n\nexport default Header","import React from 'react';\nimport Button from 'react-bootstrap/Button'\nimport Table from 'react-bootstrap/Table'\n\nfunction TableResult (props) {\n    console.log(props);\n    const listEmployees = props.employees.map((employee) => \n        <tr key={employee.id}>\n            <td>{employee.id}</td>\n                <td>{employee.first_name}</td>\n                <td>{employee.last_name}</td>\n                <td>{employee.title}</td>\n        </tr>\n        )\n\n    return (\n        <Table striped border hover>\n                <thead>\n                    <tr>\n                        <th>\n                            Employee ID \n                            <br></br>\n                            <Button variant=\"secondary\" size=\"sm\" onClick={props.sortById}>\n                                Sort\n                            </Button>\n                        </th>\n                        <th>\n                            First Name \n                            <br></br>\n                            <Button variant=\"secondary\" size=\"sm\" onClick={props.sortByFirst}>\n                                Sort\n                            </Button>\n                        </th>\n                        <th>\n                            Last Name \n                            <br></br>\n                            <Button variant=\"secondary\" size=\"sm\" onClick={props.sortByLast}>\n                                Sort\n                            </Button>\n                        </th>\n                        <th>\n                            Title\n                            <br></br>\n                            <Button variant=\"secondary\" size=\"sm\" onClick={props.sortByTitle}>\n                                Sort\n                            </Button>\n                        </th>\n                    </tr>\n                </thead>\n\n                <tbody>\n                    {listEmployees}\n                </tbody>\n        </Table>\n    )\n}\n\nexport default TableResult","import React from 'react';\nimport TableResult from '../TableResult/TableResult'\n\nlet employees = [\n    {\n        id: \"1\",\n        first_name: \"Frasier\",\n        last_name: \"Crane\",\n        title: \"Radio Host, Failed Psychiatrist\"\n    },\n    {\n        id: \"2\",\n        first_name: \"Roz\",\n        last_name: \"Doyle\",\n        title: \"Producer, Union Member\"\n    },\n    {\n        id: \"3\",\n        first_name: \"Niles\",\n        last_name: \"Crane\",\n        title: \"Less-Failed-Than-Fraiser Psychiatrist\"\n    },\n    {\n        id: \"4\",\n        first_name: \"Maris\",\n        last_name: \"Crane\",\n        title: \"Chief Drama Officer\"\n    },\n    {\n        id: \"5\",\n        first_name: \"Martin\",\n        last_name: \"Crane\",\n        title: \"Dad\"\n    },\n    {\n        id: \"6\",\n        first_name: \"Daphne\",\n        last_name: \"Moon\",\n        title: \"Chief Executive Officer of the apartment\"\n    },\n    {\n        id: \"7\",\n        first_name: \"Eddie\",\n        last_name: \"The Dog\",\n        title: \"President\"\n    },\n]\n\nlet sortedEmployees = []\n\nclass EmployeeTable extends React.Component {\n\n\n    state = {\n        employees: employees\n    }\n\n    sortById = () => {\n        sortedEmployees = employees.sort( \n            (a, b) => {\n                if (parseInt(a.id) > parseInt(b.id)) {return 1}\n                if (parseInt(a.id) < parseInt(b.id)) {return -1}\n                return 0\n            })\n        \n            this.setState({ employees: sortedEmployees  })\n    }\n\n    sortByFirst = () => {\n        sortedEmployees = employees.sort((a, b) => a.first_name.localeCompare(b.first_name))\n        \n            this.setState({ employees: sortedEmployees  })\n    }\n\n    sortByLast = () => {\n        sortedEmployees = employees.sort((a, b) => a.last_name.localeCompare(b.last_name))\n        \n            this.setState({ employees: sortedEmployees  })\n    }\n\n    sortByTitle = () => {\n        sortedEmployees = employees.sort((a, b) => a.title.localeCompare(b.title))\n        \n            this.setState({ employees: sortedEmployees  })\n    }\n\n    render() {\n\n        return (\n            <TableResult \n            employees={this.state.employees}\n            sortById={this.sortById} \n            sortByFirst={this.sortByFirst}\n            sortByLast={this.sortByLast}\n            sortByTitle={this.sortByTitle}\n            />\n        )\n\n    }\n\n}\n\nexport default EmployeeTable","import React from 'react';\n// import EmployeeRender from './components/EmployeeRender/EmployeeRender'\nimport Header from './components/Header/Header'\nimport EmployeeTable from './components/EmployeeTable/EmployeeTable'\n\nfunction App() {\n\n  return (\n    <div>\n      <Header /> \n\n      <EmployeeTable />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}